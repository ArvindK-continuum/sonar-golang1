<go-rules>
	<rule>
		<key>ExportedType</key>
		<name>Exported Type</name>
		<internalKey>ExportedType</internalKey>
		<description>an exported type should have comment or be unexported
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ExportedMethod</key>
		<name>Exported Method</name>
		<internalKey>ExportedMethod</internalKey>
		<description>an exported method should have comment or be unexported
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>FormComment</key>
		<name>Form comment of exported type</name>
		<internalKey>FormComment</internalKey>
		<description>
			comment on exported type should be of the form \"Type...\""
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>AllCaps</key>
		<name>don't use ALL_CAPS in Go names; use CamelCase</name>
		<internalKey>AllCaps</internalKey>
		<description>
			don't use ALL_CAPS in Go names; use CamelCase
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>UnderscoreInPackageName</key>
		<name>don't use an underscore in package name</name>
		<internalKey>UnderscoreInPackageName</internalKey>
		<description>
			don't use an underscore in package name
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>LeadingK</key>
		<name>don't use leading k in Go names</name>
		<internalKey>LeadingK</internalKey>
		<description>
			don't use leading k in Go names; kFoo or kfoo should be Foo or foo
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>UnderscoreInGoName</key>
		<name>don't use underscores in Go names</name>
		<internalKey>UnderscoreInGoName</internalKey>
		<description>
			don't use underscores in Go names
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ErrorLastReturn</key>
		<name>error should be the last type when returning multiple items
		</name>
		<internalKey>ErrorLastReturn</internalKey>
		<description>
			error should be the last type when returning multiple items
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ErrorEndString</key>
		<name>error strings should not be capitalized or end with punctuation
			or a newline</name>
		<internalKey>ErrorEndString</internalKey>
		<description>
			error strings should not be capitalized or end with punctuation or a
			newline
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ErrorVarName</key>
		<name>error var err should have name of the form errFoo</name>
		<internalKey>ErrorVarName</internalKey>
		<description>
			error var err should have name of the form errFoo
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>AnnoyingUseExportedType</key>
		<name>exported %s %s returns unexported type %s, which can be annoying to use</name>
		<internalKey>AnnoyingUseExportedType</internalKey>
		<description>
			exported %s %s returns unexported type %s, which can be annoying to use
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>IfBlockReturn</key>
		<name>if block ends with a return statement, so drop this else and outdent its block</name>
		<internalKey>IfBlockReturn</internalKey>
		<description>
			if block ends with a return statement, so drop this else and outdent its block
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>PackageCommentForm</key>
		<name>package comment</name>
		<internalKey>PackageCommentForm</internalKey>
		<description>
			package comment should be of the form \"NamePackage...\"
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>PackageCommentSpace</key>
		<name>package not have leading space</name>
		<internalKey>PackageCommentSpace</internalKey>
		<description>
			package comment should not have leading space
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>


	<rule>
		<key>ReceiverNameConsistent</key>
		<name>receiver name should be consistent</name>
		<internalKey>ReceiverNameConsistent</internalKey>
		<description>
			receiver name %s should be consistent with previous receiver name %s for %s
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>ReceiverNameReflection</key>
		<name>receiver name should be a reflection</name>
		<internalKey>ReceiverNameReflection</internalKey>
		<description>
			receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\""
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>ReceiverNameNotUnderscore</key>
		<name>receiver name should not be an underscore</name>
		<internalKey>ReceiverNameNotUnderscore</internalKey>
		<description>
			receiver name should not be an underscore
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>DropAssignment</key>
		<name>drop assignment</name>
		<internalKey>DropAssignment</internalKey>
		<description>
			should drop assignment; it is the zero value
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>HavePackageComment</key>
		<name>Should have a package comment</name>
		<internalKey>HavePackageComment</internalKey>
		<description>
			should have a package comment, unless it's in another file for this package
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>NotUseBasicType</key>
		<name>should not use basic type</name>
		<internalKey>NotUseBasicType</internalKey>
		<description>
			should not use basic type %s as key in context.WithValue
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>NotUseDotImport</key>
		<name>should not use dot imports</name>
		<internalKey>NotUseDotImport</internalKey>
		<description>
			should not use dot imports
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>Omit2ndValueFromRange</key>
		<name>should omit 2nd value from range</name>
		<internalKey>Omit2ndValueFromRange</internalKey>
		<description>
			should omit 2nd value from range; this loop is equivalent to `for %s %s range ...`
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>OmitType</key>
		<name>should omit type %s from declaration of var %s</name>
		<internalKey>OmitType</internalKey>
		<description>
	    should omit type %s from declaration of var %s; it will be inferred from the right-hand side
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>Replace</key>
		<name>should replace</name>
		<internalKey>Replace</internalKey>
		<description>
	  should replace %s with %s%s
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>ReplaceSprintf</key>
		<name>should replace Sprintf by Errorf</name>
		<internalKey>ReplaceSprintf</internalKey>
		<description>
		should replace %s(fmt.Sprintf(...)) with %s.Errorf(...)
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
</go-rules>
