<!--
    Copyright 2017 - UniversitÃ© d'Artois
   
    This file is part of SonarQube Golang plugin (sonar-golang).
   
    Sonar-golang is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
   
    Sonar-golang is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
   
    You should have received a copy of the GNU Lesser General Public License
    along with Sonar-golang.  If not, see <http://www.gnu.org/licenses/>.
   
    Contributors:
               Thibault Falque (thibault_falque@ens.univ-artois.fr)
 -->
<go-rules>
<!-- 	<rule> -->
<!-- 		<key>golint:ExportedType</key> -->
<!-- 		<name>Exported Type</name> -->
<!-- 		<internalKey>golint:ExportedType</internalKey> -->
<!-- 		<description>an exported type should have comment or be unexported. -->
<!-- 			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L761 -->
<!-- 		</description> -->
<!-- 		<severity>MINOR</severity> -->
<!-- 		<cardinality>SINGLE</cardinality> -->
<!-- 		<status>READY</status> -->
<!-- 		<type>CODE_SMELL</type> -->
<!-- 		<tag>bad-practice</tag> -->
<!-- 		<tag>comments</tag> -->
<!-- 		<remediationFunction>CONSTANT_ISSUE</remediationFunction> -->
<!-- 		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort> -->
<!-- 	</rule> -->


	<rule>
		<key>golint:FormComment</key>
		<name>Form comment of exported type</name>
		<internalKey>golint:FormComment</internalKey>
		<description>
			comment on exported type should be of the form \"Type...\"".
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L761
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:AllCaps</key>
		<name>don't use ALL_CAPS in Go names; use CamelCase</name>
		<internalKey>golint:AllCaps</internalKey>
		<description>
			don't use ALL_CAPS in Go names; use CamelCase.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L517 and https://golang.org/doc/effective_go.html
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:UnderscoreInPackageName</key>
		<name>don't use an underscore in package name</name>
		<internalKey>golint:UnderscoreInPackageName</internalKey>
		<description>
			don't use an underscore in package name.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L517 and https://golang.org/doc/effective_go.html
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:LeadingK</key>
		<name>don't use leading k in Go names</name>
		<internalKey>golint:LeadingK</internalKey>
		<description>
			don't use leading k in Go names; kFoo or kfoo should be Foo or foo.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L517 and https://golang.org/doc/effective_go.html
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:UnderscoreInGoName</key>
		<name>don't use underscores in Go names</name>
		<internalKey>golint:UnderscoreInGoName</internalKey>
		<description>
			don't use underscores in Go names.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L517 and https://golang.org/doc/effective_go.html
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ErrorLastReturn</key>
		<name>error should be the last type when returning multiple items
		</name>
		<internalKey>golint:ErrorLastReturn</internalKey>
		<description>
			error should be the last type when returning multiple items.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1263
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>arg-order</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ErrorEndString</key>
		<name>error strings should not be capitalized or end with punctuation
			or a newline</name>
		<internalKey>golint:ErrorEndString</internalKey>
		<description>
			error strings should not be capitalized or end with punctuation or a
			newline.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1169
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>errors</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ErrorVarName</key>
		<name>error var err should have name of the form errFoo</name>
		<internalKey>golint:ErrorVarName</internalKey>
		<description>
			error var err should have name of the form errFoo.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1115
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:AnnoyingUseExportedType</key>
		<name>exported function returns unexported type</name>
		<internalKey>golint:AnnoyingUseExportedType</internalKey>
		<description>
			exported function returns unexported type, which can be annoying to use.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1287
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>unexported-type-in-api</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:IfBlockReturn</key>
		<name>if block ends with a return statement, so drop this else and outdent its block</name>
		<internalKey>golint:IfBlockReturn</internalKey>
		<description>
			if block ends with a return statement, so drop this else and outdent its block.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1007
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>indent</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:PackageCommentForm</key>
		<name>package comment</name>
		<internalKey>golint:PackageCommentForm</internalKey>
		<description>
			package comment should be of the form \"NamePackage...\".
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L352
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:PackageCommentSpace</key>
		<name>package not have leading space</name>
		<internalKey>golint:PackageCommentSpace</internalKey>
		<description>
			package comment should not have leading space.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L352
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>


	<rule>
		<key>golint:ReceiverNameConsistent</key>
		<name>receiver name should be consistent</name>
		<internalKey>golint:ReceiverNameConsistent</internalKey>
		<description>
			receiver name %s should be consistent with previous receiver name %s for %s.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1202
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ReceiverNameReflection</key>
		<name>receiver name should be a reflection</name>
		<internalKey>golint:ReceiverNameReflection</internalKey>
		<description>
			receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\"".
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1202
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ReceiverNameNotUnderscore</key>
		<name>receiver name should not be an underscore</name>
		<internalKey>golint:ReceiverNameNotUnderscore</internalKey>
		<description>
			receiver name should not be an underscore.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1202
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:DropAssignment</key>
		<name>drop assignment</name>
		<internalKey>golint:DropAssignment</internalKey>
		<description>
			should drop assignment; it is the zero value.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L929
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>zero-value</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:HavePackageComment</key>
		<name>Should have a package comment</name>
		<internalKey>golint:HavePackageComment</internalKey>
		<description>
			should have a package comment, unless it's in another file for this package.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L352
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:NotUseBasicType</key>
		<name>should not use basic type</name>
		<internalKey>golint:NotUseBasicType</internalKey>
		<description>
			should not use basic type (https://tour.golang.org/basics/11) as key in context.WithValue.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1400
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>context</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:NotUseDotImport</key>
		<name>should not use dot imports</name>
		<internalKey>golint:NotUseDotImport</internalKey>
		<description>
			should not use dot imports.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L440
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:Omit2ndValueFromRange</key>
		<name>should omit 2nd value from range</name>
		<internalKey>golint:Omit2ndValueFromRange</internalKey>
		<description>
			should omit 2nd value from range; this loop is equivalent to `for %s %s range ...`.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1051
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>range-loop</tag>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:OmitType</key>
		<name>should omit type %s from declaration of var %s</name>
		<internalKey>golint:OmitType</internalKey>
		<description>
	    should omit type %s from declaration of var %s; it will be inferred from the right-hand side.
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L929
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>type-inference</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>golint:ReplaceLintIncDec</key>
		<name>should replace</name>
		<internalKey>golint:ReplaceLintIncDec</internalKey>
		<description>
	  should replace x=x+1(respectively x=x-1) with x++ (respectively x--).
		Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1235
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ReplaceSprintf</key>
		<name>should replace Sprintf by Errorf</name>
		<internalKey>golint:ReplaceSprintf</internalKey>
		<description>
		should replace %s(fmt.Sprintf(...)) with %s.Errorf(...).

		Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1077

		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:Initialisms</key>
		<name>Initialisms</name>
		<internalKey>golint:Initialisms</internalKey>
		<description>
			Words in names that are initialisms or acronyms (e.g. "URL" or "NATO") have a consistent case. For example, "URL" should appear as "URL" or "url" (as in "urlPony", or "URLPony"), never as "Url". Here's an example: ServeHTTP not ServeHttp.
			Additional information can be found at https://github.com/golang/go/wiki/CodeReviewComments#initialisms
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:PackageNames</key>
		<name>Package names</name>
		<internalKey>golint:PackageNames</internalKey>
		<description>
			All references to names in your package will be done using the package name, so you can omit that name from the identifiers.
			Additional information can be found at https://github.com/golang/go/wiki/CodeReviewComments#package-names and https://github.com/golang/lint/blob/master/lint.go#L887
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>naming</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:BlankImport</key>
		<name>a non-main package has blank imports</name>
		<internalKey>golint:BlankImport</internalKey>
		<description>
			a blank import should be only in a main or test package, or have a comment justifying it
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L408 and https://github.com/golang/go/wiki/CodeReviewComments#package-comments
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>imports</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:CommentExportedType</key>
		<name>comment on exported type</name>
		<internalKey>golint:CommentExportedType</internalKey>
		<description>
			comment on exported type should be of the form \"Type ...\" (with optional leading article)
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L761 and https://github.com/golang/go/wiki/CodeReviewComments#doc-comments
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>


	<rule>
		<key>golint:ContextContextFirstArg</key>
		<name>context.Context should be the first argument</name>
		<internalKey>golint:ContextContextFirstArgs</internalKey>
		<description>
			context.Context should be the first parameter of a function
					Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1426 and https://golang.org/pkg/context/
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>arg-order</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ExportedHaveComment</key>
		<name>exported * should have comment</name>
		<internalKey>golint:ExportedHaveComment</internalKey>
		<description>
			exported %s %s should have comment or be unexported
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L794
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ExportedHaveComment2</key>
		<name>exported * should have comment</name>
		<internalKey>golint:ExportedHaveComment2</internalKey>
		<description>
			exported %s %s should have comment or be unexported
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L834
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>

	<rule>
		<key>golint:ExportedDeclaration</key>
		<name>exported * should have its own declaration</name>
		<internalKey>ExportedDeclaration</internalKey>
		<description>
			exported %s %s should have its own declaration
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L834
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>comments</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>


	<rule>
		<key>golint:SpecificSuffix</key>
		<name>don't use unit-specific suffix</name>
		<internalKey>golint:SpecificSuffix</internalKey>
		<description>
       var %s is of type %v; don't use unit-specific suffix %q
			Additional information can be found at https://github.com/golang/lint/blob/master/lint.go#L1343
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<tag>time</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	
	<rule>
		<key>gocyclo:CyclomaticComplexity</key>
		<name>Cyclomatic complexity is hight</name>
		<internalKey>gocyclo:CyclomaticComplexity</internalKey>
		<description>
      		The cyclomatic complexity is greater than 10
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>complexity</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>errcheck:ValueNotChecked</key>
		<name>Return value not checked</name>
		<internalKey>errcheck:ValueNotChecked</internalKey>
		<description>
      		The return  value of the function is not checked
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<tag>check</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>unconvert:UnnecessaryConversion</key>
		<name>Unnecessary Conversion</name>
		<internalKey>unconvert:UnnecessaryConversion</internalKey>
		<description>
      		Unnecessary Conversion
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>simple</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>structcheck:UnusedStructField</key>
		<name>unused struct field</name>
		<internalKey>structcheck:UnusedStructField</internalKey>
		<description>
      		unused struct field
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>check</tag>
		<tag>unused</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	
	
	
</go-rules>
