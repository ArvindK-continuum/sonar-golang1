ExportedType=exported type [a-zA-Z0-9]+ should have comment or be unexported
ExportedMethod=exported method [a-zA-Z0-9]+ should have comment or be unexported
FormComment=comment on exported [a-zA-Z0-9]+ [a-zA-Z0-9]+ should be of the form "[a-zA-Z0-9]+..."
AllCaps=don't use ALL_CAPS in Go names; use CamelCase
UnderscoreInPackageName=don't use an underscore in package name
LeadingK=don't use leading k in Go names; [a-zA-Z0-9]+ [a-zA-Z0-9]+ should be [a-zA-Z0-9]+
UnderscoreInGoName=don't use underscores in Go names; %s %s should be %s
ErrorLastReturn=error should be the last type when returning multiple items
ErrorEndString=error strings should not be capitalized or end with punctuation or a newline
ErrorVarName=error var [a-zA-Z0-9]+ should have name of the form [a-zA-Z0-9]+
AnnoyingUseExportedType=exported [a-zA-Z0-9]+ [a-zA-Z0-9]+ returns unexported type [a-zA-Z0-9]+, which can be annoying to use
IfBlockReturn=if block ends with a return statement, so drop this else and outdent its block
PackageCommentForm=package comment should be of the form \"[a-zA-Z0-9]+...\"
PackageCommentSpace=package comment should not have leading space
ReceiverNameConsistent=receiver name [a-zA-Z0-9]+ should be consistent with previous receiver name [a-zA-Z0-9]+ for [a-zA-Z0-9]+
ReceiverNameReflection=receiver name should be a reflection of its identity; don't use generic names such as \"this\" or \"self\"
ReceiverNameNotUnderscore=receiver name should not be an underscore
DropAssignment=should drop = [a-zA-Z0-9]+ from declaration of var [a-zA-Z0-9]+; it is the zero value
HavePackageComment=should have a package comment, unless it's in another file for this package
NotUseBasicType=should not use basic type [a-zA-Z0-9]+ as key in context.WithValue
NotUseDotImport=should not use dot imports
Omit2ndValueFromRange=should omit 2nd value from range; this loop is equivalent to `for [a-zA-Z0-9]+ [a-zA-Z0-9]+ range ...`
OmitType=should omit type %s from declaration of var [a-zA-Z0-9]+; it will be inferred from the right-hand side
Replace=should replace [a-zA-Z0-9]+ with [a-zA-Z0-9]+
ReplaceSprintf=should replace %s(fmt.Sprintf(...)) with %s.Errorf(...)
