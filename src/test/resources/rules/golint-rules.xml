<!--
    Copyright 2017 - UniversitÃ© d'Artois
   
    This file is part of SonarQube Golang plugin (sonar-golang).
   
    Sonar-golang is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
   
    Sonar-golang is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
   
    You should have received a copy of the GNU Lesser General Public License
    along with Sonar-golang.  If not, see <http://www.gnu.org/licenses/>.
   
    Contributors:
               Thibault Falque (thibault_falque@ens.univ-artois.fr)
 -->
<go-rules>
	<rule>
		<key>ExportedType</key>
		<name>Exported Type</name>
		<internalKey>ExportedType</internalKey>
		<description>an exported type should have comment or be unexported
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ExportedMethod</key>
		<name>Exported Method</name>
		<internalKey>ExportedMethod</internalKey>
		<description>an exported method should have comment or be unexported
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>FormComment</key>
		<name>Form comment of exported type</name>
		<internalKey>FormComment</internalKey>
		<description>
			comment on exported type should be of the form \"Type...\""
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>AllCaps</key>
		<name>don't use ALL_CAPS in Go names; use CamelCase</name>
		<internalKey>AllCaps</internalKey>
		<description>
			don't use ALL_CAPS in Go names; use CamelCase
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>UnderscoreInPackageName</key>
		<name>don't use an underscore in package name</name>
		<internalKey>UnderscoreInPackageName</internalKey>
		<description>
			don't use an underscore in package name
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>LeadingK</key>
		<name>don't use leading k in Go names</name>
		<internalKey>LeadingK</internalKey>
		<description>
			don't use leading k in Go names; kFoo or kfoo should be Foo or foo
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>UnderscoreInGoName</key>
		<name>don't use underscores in Go names</name>
		<internalKey>UnderscoreInGoName</internalKey>
		<description>
			don't use underscores in Go names
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ErrorLastReturn</key>
		<name>error should be the last type when returning multiple items
		</name>
		<internalKey>ErrorLastReturn</internalKey>
		<description>
			error should be the last type when returning multiple items
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ErrorEndString</key>
		<name>error strings should not be capitalized or end with punctuation
			or a newline</name>
		<internalKey>ErrorEndString</internalKey>
		<description>
			error strings should not be capitalized or end with punctuation or a
			newline
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ErrorVarName</key>
		<name>error var err should have name of the form errFoo</name>
		<internalKey>ErrorEndString</internalKey>
		<description>
			error var err should have name of the form errFoo
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<tag>bad-practice</tag>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
</go-rules>
